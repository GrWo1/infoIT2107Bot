import os
import logging
import requests

from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

from keyboards import keyboard_start, keyboard_num_system, keyboard_info


load_dotenv()

TOKEN = os.getenv('TOKEN')
CHAT_TOKEN = os.getenv('CHAT_ID')
OPEN_WEATHER_TOKEN = os.getenv('OPEN_WEATHER_TOKEN')
LIST_COMMAND = '''
<b>/start</b> - <em>–∑–∞–ø—É—Å–∫–∞–µ—Ç infoIT2107 –±–æ—Ç–∞</em>\n
<b>/help</b> - <em>—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞</em>\n
'''
LIST_OF_CALLS = '''
<b>1 —É—Ä–æ–∫</b> - 08:30-09:15 \n
<b>2 —É—Ä–æ–∫</b> - 09:25-10:10 \n
<b>3 —É—Ä–æ–∫</b> - 10:30-11:15 \n
<b>4 —É—Ä–æ–∫</b> - 11:30-12:15 \n
<b>5 —É—Ä–æ–∫</b> - 12:25-13:10 \n
<b>6 —É—Ä–æ–∫</b> - 13:30-14:15 \n
<b>7 —É—Ä–æ–∫</b> - 14:30-15:15 \n
<b>8 —É—Ä–æ–∫</b> - 15:25-16:10 \n
'''


logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    number = State()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer(
        text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–º–æ–≥—É —á–µ–º —Å–º–æ–≥—É...\n' + LIST_COMMAND,
        reply_markup=keyboard_start,
        parse_mode='HTML',
    )


@dp.message_handler(lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
async def back_command(message: types.Message):
    await message.answer(
        text='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=keyboard_start,
    )
    await message.delete()


@dp.message_handler(lambda message: message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def info_command(message: types.Message):
    await message.answer(
        text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        reply_markup=keyboard_info,
    )
    await message.delete()


@dp.message_handler(lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤')
async def list_of_call(message: types.Message):
    await message.answer(
        text='üîî–†–ê–°–ü–ò–°–ê–ù–ò–ï –ó–í–û–ù–ö–û–íüîî\n' + LIST_OF_CALLS,
        parse_mode='HTML',
    )
    await message.delete()


@dp.message_handler(lambda message: message.text == '–°–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è')
async def num_system(message: types.Message):
    await message.answer(
        text='–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤ —É–∫–∞–∑–∞–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è.\n'
             '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ üî¢',
        reply_markup=keyboard_num_system,
    )
    await message.delete()


@dp.message_handler(lambda message:
                    message.text == '–î–≤–æ–∏—á–Ω–∞—è' or
                    message.text == '–í–æ—Å—å–º–∏—Ä–∏—á–Ω–∞—è' or
                    message.text == '–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–∞—è' or
                    message.text == '–î–µ—Å—è—Ç–∏—á–Ω–∞—è'
                    )
async def num_system(message: types.Message, state: FSMContext):
    async with state.proxy() as proxy:
        proxy['num_system'] = message.text
    if message.text == '–î–µ—Å—è—Ç–∏—á–Ω–∞—è':
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —É–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è.')
    else:
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.')
    await Form.number.set()


@dp.message_handler(state=Form.number)
async def num_system_code(message: types.Message, state: FSMContext):
    async with state.proxy() as proxy:
        try:
            number = message.text
            if proxy['num_system'] == '–î–≤–æ–∏—á–Ω–∞—è':
                number = bin(int(number))[2:]
            elif proxy['num_system'] == '–í–æ—Å—å–º–∏—Ä–∏—á–Ω–∞—è':
                number = oct(int(number))[2:]
            elif proxy['num_system'] == '–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–∞—è':
                number = hex(int(number))[2:]
                number = number.upper()
            elif proxy['num_system'] == '–î–µ—Å—è—Ç–∏—á–Ω–∞—è':
                number, n_system = number.split()
                number = int(number.lower(), int(n_system))
            await message.answer(number)
            await state.finish()
        except ValueError:
            await message.delete()
            await message.answer(
                text='–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —á–∏—Å–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞.',
                reply_markup=keyboard_num_system,
            )
            await state.finish()


@dp.message_handler(lambda message: message.text == '–ö–æ–Ω–µ—Ü —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞')
async def end_year(message: types.Message):
    end_time = datetime(2023, 5, 25)
    time_now = datetime.now()
    time_delta = end_time - time_now
    time_delta = time_delta.days
    await message.delete()
    await message.answer(f'–î–æ –∫–æ–Ω—Ü–∞ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å {time_delta} –¥.')


@dp.message_handler(lambda message: message.text == '–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞ üêà')
async def end_year(message: types.Message):
    response = requests.get(url='https://api.thecatapi.com/v1/images/search').json()
    random_cat = response[0].get('url')
    await message.delete()
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=random_cat,
    )


@dp.message_handler(lambda message: message.text == '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ —É–ª–∏—Ü–µ')
async def get_weather(message: types.Message):
    address = 'https://ipinfo.io/json'
    response = requests.get(url=address).json()
    lat, lon = response['loc'].split(',')
    params = {
        'lat': lat,
        'lon': lon,
        'appid': '87da88c8017d9374989a48ebba1e3e52',
        'units': 'metric',
    }
    address = 'https://api.openweathermap.org/data/2.5/weather?'
    response = requests.get(url=address, params=params).json()
    response = response.get('main')
    temp = round(response['temp'])
    await message.delete()
    await message.answer(text=f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ —É–ª–∏—Ü–µ {temp} ‚ÑÉ')


@dp.message_handler(lambda message: message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π IP')
async def get_ip_address(message: types.Message):
    address = 'https://ipinfo.io/json'
    response = requests.get(url=address).json()
    ip_address = response['ip']
    await message.delete()
    await message.answer(text=f'–í–∞—à ip-–∞–¥—Ä–µ—Å - {ip_address}')


if __name__ == '__main__':
    executor.start_polling(
        dp,
        skip_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
    )
